name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch-name: aarch64-apple-darwin
            os: macos-latest
            target: aarch64-apple-darwin

          - arch-name: aarch64-unknown-linux-gnu
            os: ubuntu-24.04-arm
            target: aarch64-unknown-linux-gnu

          - arch-name: aarch64-unknown-linux-musl
            os: ubuntu-24.04-arm
            target: aarch64-unknown-linux-musl

          - arch-name: aarch64-pc-windows-msvc
            os: windows-latest
            target: aarch64-pc-windows-msvc
            file-ext: .exe

          - arch-name: x86_64-apple-darwin
            os: macos-latest
            target: x86_64-apple-darwin

          - arch-name: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu

          - arch-name: x86_64-unknown-linux-musl
            os: ubuntu-latest
            target: x86_64-unknown-linux-musl

          - arch-name: x86_64-pc-windows-msvc
            os: windows-latest
            target: x86_64-pc-windows-msvc
            file-ext: .exe

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@main
        with:
          fetch-depth: 1
          submodules: recursive

      - name: Install toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Install dependencies for Windows
        if: startsWith(matrix.os, 'windows')
        run: |
          choco install nasm
          echo "C:\Program Files\NASM" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Install general dependencies for Ubuntu
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt update
          sudo apt install -y \
            musl-tools \
            cmake \
            clang \
            gcc-x86-64-linux-gnu \
            gcc-aarch64-linux-gnu

      - name: Build (default features)
        run: cargo build --verbose --target ${{ matrix.target }}

      - name: Build (all features)
        run: cargo build --verbose --all-features --target ${{ matrix.target }}

      - name: Build (no default features)
        run: cargo build --verbose --no-default-features --target ${{ matrix.target }}

      - name: Build Release (default features)
        run: cargo build --release --verbose --target ${{ matrix.target }}

      - name: Build Release (all features)
        run: cargo build --release --verbose --all-features --target ${{ matrix.target }}

      - name: Build Release (no default features)
        run: cargo build --release --verbose --no-default-features --target ${{ matrix.target }}

      - name: Build Binary (client)
        run: cargo build --verbose --bin ombrac-client --features binary --target ${{ matrix.target }}

      - name: Build Binary (server)
        run: cargo build --verbose --bin ombrac-server --features binary --target ${{ matrix.target }}

      - name: Build Binary Release (client)
        run: cargo build --release --verbose --bin ombrac-client --features binary --target ${{ matrix.target }}

      - name: Build Binary Release (server)
        run: cargo build --release --verbose --bin ombrac-server --features binary --target ${{ matrix.target }}

      - name: Upload Binaries
        uses: actions/upload-artifact@main
        with:
          name: binaries-${{ matrix.arch-name }}
          path: |
            target/${{ matrix.target }}/release/ombrac-client${{ matrix.file-ext }}
            target/${{ matrix.target }}/release/ombrac-server${{ matrix.file-ext }}

      - name: Test
        if: |
          matrix.target == 'x86_64-apple-darwin' ||
          matrix.target == 'x86_64-pc-windows-msvc' ||
          matrix.target == 'x86_64-unknown-linux-gnu'
        run: cargo test --verbose --target ${{ matrix.target }}


  build-ios:
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@main
        with:
          fetch-depth: 1
          submodules: recursive

      - name: Install toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Install dependencies
        run: |
          rustup target add aarch64-apple-ios
          rustup target add x86_64-apple-ios

      - name: Build
        env:
          IPHONEOS_DEPLOYMENT_TARGET: 17.5
        run: |
          cargo build --verbose --features binary --target aarch64-apple-ios
          cargo build --verbose --features binary --target x86_64-apple-ios


  build-android:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@main
        with:
          fetch-depth: 1
          submodules: recursive

      - name: Install toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y gcc-multilib
          cargo install cargo-ndk
          rustup target add aarch64-linux-android
          rustup target add x86_64-linux-android

      - name: Build
        run: |
          cargo ndk -t arm64-v8a -t x86_64 build --verbose
          cargo ndk -t arm64-v8a -t x86_64 build --verbose --features binary


  build-docker:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: amd64
            os: ubuntu-latest
            target: ombrac-server

          - arch: amd64
            os: ubuntu-latest
            target: ombrac-client

          - arch: arm64
            os: ubuntu-24.04-arm
            target: ombrac-server

          - arch: arm64
            os: ubuntu-24.04-arm
            target: ombrac-client

    steps:
      - name: Checkout repository
        uses: actions/checkout@main

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@master

      - name: Build Docker image
        uses: docker/build-push-action@master
        with:
          context: .
          file: ./Dockerfile
          target: ${{ matrix.target }}
          platforms: linux/${{ matrix.arch }}
          push: false
          load: true
          tags: ${{ matrix.target }}:test-${{ matrix.arch }}
          build-args: TARGETARCH=${{ matrix.arch }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --rm ${{ matrix.target }}:test-${{ matrix.arch }} --version
          docker run --rm ${{ matrix.target }}:test-${{ matrix.arch }} --help


  dry-publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@main
        with:
          fetch-depth: 1
          submodules: recursive

      - name: Install toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Publish ombrac
        working-directory: crates/ombrac
        run: cargo publish --dry-run

      - name: Publish ombrac-macros
        working-directory: crates/ombrac-macros
        run: cargo publish --dry-run

      - name: Publish ombrac-netstack
        working-directory: crates/ombrac-netstack
        run: cargo publish --dry-run

      - name: Publish ombrac-transport
        working-directory: crates/ombrac-transport
        run: cargo publish --dry-run

      - name: Publish ombrac-server
        working-directory: crates/ombrac-server
        run: cargo publish --dry-run

      - name: Publish ombrac-client
        working-directory: crates/ombrac-client
        run: cargo publish --dry-run
