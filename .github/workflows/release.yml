name: Release

on:
  push:
    tags:
      - '*'

jobs:
  release:
    permissions:
      contents: write

    strategy:
      fail-fast: true
      matrix:
        include:
          - arch-name: aarch64-apple-darwin
            os: macos-latest
            target: aarch64-apple-darwin
            file-ext:

          - arch-name: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            file-ext:

          - arch-name: aarch64-linux-android
            os: ubuntu-latest
            target: aarch64-linux-android

          - arch-name: aarch64-pc-windows-msvc
            os: windows-latest
            target: aarch64-pc-windows-msvc
            file-ext: .exe

          - arch-name: x86_64-apple-darwin
            os: macos-latest
            target: x86_64-apple-darwin
            file-ext:

          - arch-name: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            file-ext:

          - arch-name: x86_64-pc-windows-msvc
            os: windows-latest
            target: x86_64-pc-windows-msvc
            file-ext: .exe

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@main
        with:
          fetch-depth: 1
          submodules: recursive

      - name: Install toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Install dependencies
        run: mkdir -p .cargo

      - name: Install dependencies for Windows
        if: matrix.os == 'windows-latest'
        run: | 
          choco install nasm
          echo "C:\Program Files\NASM" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Install dependencies for aarch64-unknown-linux-gnu
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: | 
          sudo apt update
          sudo apt install -y gcc-aarch64-linux-gnu
          echo '[target.aarch64-unknown-linux-gnu]' > .cargo/config.toml
          echo 'linker = "aarch64-linux-gnu-gcc"' >> .cargo/config.toml

      - name: Install dependencies for aarch64-linux-android
        if: matrix.target == 'aarch64-linux-android'
        uses: nttld/setup-ndk@main
        with:
          ndk-version: r26d
          local-cache: true

      - name: Build binaries
        run: |
          cargo build --release --bin ombrac-client --features binary --target ${{ matrix.target }}
          cargo build --release --bin ombrac-server --features binary --target ${{ matrix.target }}

      - name: Move binaries
        shell: bash
        run: |
          mkdir -p artifacts/
          binaries=("ombrac-client" "ombrac-server")
          for binary in "${binaries[@]}"; do
            mv target/${{ matrix.target }}/release/$binary${{ matrix.file-ext }} artifacts/
          done

      - name: Compressed
        shell: bash
        run: |
          cd artifacts
          tar -czvf ombrac-${{ matrix.arch-name }}.tar.gz ./*
          openssl dgst -sha256 -r ombrac-${{ matrix.arch-name }}.tar.gz > ombrac-${{ matrix.arch-name }}.tar.gz.sha256sum

      - name: Release
        uses: ncipollo/release-action@main
        with:
          artifacts: |
            artifacts/ombrac-${{ matrix.arch-name }}.tar.gz
            artifacts/ombrac-${{ matrix.arch-name }}.tar.gz.sha256sum
          allowUpdates: true
          artifactErrorsFailBuild: true
          omitName: true
          omitBody: true
          omitNameDuringUpdate: true
          omitBodyDuringUpdate: true
          omitDraftDuringUpdate: true

  publish:
    needs: release

    runs-on: ubuntu-latest

    env:
      CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@main
        with:
          fetch-depth: 1
          submodules: recursive

      - name: Install toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Publish ombrac
        working-directory: crates/ombrac
        run: cargo publish

      - name: Publish ombrac-macros
        working-directory: crates/ombrac-macros
        run: cargo publish

      - name: Publish ombrac-transport
        working-directory: crates/ombrac-transport
        run: cargo publish

      - name: Publish ombrac-server
        working-directory: crates/ombrac-server
        run: cargo publish

      - name: Publish ombrac-client
        working-directory: crates/ombrac-client
        run: cargo publish