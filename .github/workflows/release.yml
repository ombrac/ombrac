name: Release

on:
  push:
    tags:
      - '*'

jobs:
  release:
    permissions:
      contents: write

    strategy:
      fail-fast: true
      matrix:
        include:
          - arch-name: aarch64-apple-darwin
            os: macos-latest
            target: aarch64-apple-darwin
            file-ext:

          - arch-name: aarch64-unknown-linux-gnu
            os: ubuntu-24.04-arm
            target: aarch64-unknown-linux-gnu
            file-ext:

          - arch-name: aarch64-unknown-linux-musl
            os: ubuntu-24.04-arm
            target: aarch64-unknown-linux-musl
            file-ext:

          - arch-name: aarch64-pc-windows-msvc
            os: windows-latest
            target: aarch64-pc-windows-msvc
            file-ext: .exe

          - arch-name: x86_64-apple-darwin
            os: macos-latest
            target: x86_64-apple-darwin
            file-ext:

          - arch-name: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            file-ext:

          - arch-name: x86_64-unknown-linux-musl
            os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            file-ext:

          - arch-name: x86_64-pc-windows-msvc
            os: windows-latest
            target: x86_64-pc-windows-msvc
            file-ext: .exe

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@main
        with:
          fetch-depth: 1
          submodules: recursive

      - name: Install toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Install dependencies for Windows
        if: startsWith(matrix.os, 'windows')
        run: |
          choco install nasm
          echo "C:\Program Files\NASM" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Install general dependencies for Ubuntu
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt update
          sudo apt install -y \
            musl-tools \
            cmake \
            clang \
            gcc-x86-64-linux-gnu \
            gcc-aarch64-linux-gnu

      - name: Build
        run: |
          cargo build --release --verbose --target ${{ matrix.target }}
          cargo build --release --verbose --all-features --target ${{ matrix.target }}
          cargo build --release --verbose --no-default-features --target ${{ matrix.target }}

      - name: Build binaries
        run: |
          cargo build --release --bin ombrac-client --features binary --target ${{ matrix.target }}
          cargo build --release --bin ombrac-server --features binary --target ${{ matrix.target }}

      - name: Move binaries
        shell: bash
        run: |
          mkdir -p artifacts/
          binaries=("ombrac-client" "ombrac-server")
          for binary in "${binaries[@]}"; do
            mv target/${{ matrix.target }}/release/$binary${{ matrix.file-ext }} artifacts/
          done

      - name: Compressed
        shell: bash
        run: |
          cd artifacts
          tar -czvf ombrac-${{ matrix.arch-name }}.tar.gz ./*
          openssl dgst -sha256 -r ombrac-${{ matrix.arch-name }}.tar.gz > ombrac-${{ matrix.arch-name }}.tar.gz.sha256sum

      - name: Release
        uses: ncipollo/release-action@main
        with:
          artifacts: |
            artifacts/ombrac-${{ matrix.arch-name }}.tar.gz
            artifacts/ombrac-${{ matrix.arch-name }}.tar.gz.sha256sum
          allowUpdates: true
          artifactErrorsFailBuild: true
          omitName: true
          omitBody: true
          omitNameDuringUpdate: true
          omitBodyDuringUpdate: true
          omitDraftDuringUpdate: true


  build-and-push-docker-images:
    needs: release

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    strategy:
      fail-fast: false
      matrix:
        include:
          - docker-arch: amd64
            os: ubuntu-latest

          - docker-arch: arm64
            os: ubuntu-24.04-arm

    runs-on: ${{ matrix.os }}

    env:
      REGISTRY: ghcr.io
      IMAGE_NAME_SERVER: ${{ github.repository }}/ombrac-server
      IMAGE_NAME_CLIENT: ${{ github.repository }}/ombrac-client

    steps:
      - name: Checkout repository
        uses: actions/checkout@main

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@master

      - name: Log in to the Container registry
        uses: docker/login-action@master
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker images
        id: meta
        uses: docker/metadata-action@master
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_SERVER }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_CLIENT }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable=${{ github.ref == format('refs/tags/{0}', github.event.repository.default_branch) || startsWith(github.ref, 'refs/heads/release') }}
          labels: |
            org.opencontainers.image.source=${{ github.event.repository.html_url }}
            org.opencontainers.image.licenses=Apache-2.0

      - name: Build and push Docker images for ${{ matrix.docker-arch }}
        id: push
        uses: docker/build-push-action@master
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/${{ matrix.docker-arch }} 
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: |
            type=image,name=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_SERVER }},push=true
            type=image,name=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_CLIENT }},push=true


  publish:
    needs: [release, build-and-push-docker-images]

    runs-on: ubuntu-latest

    env:
      CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@main
        with:
          fetch-depth: 1
          submodules: recursive

      - name: Install toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Publish ombrac
        working-directory: crates/ombrac
        run: cargo publish

      - name: Publish ombrac-macros
        working-directory: crates/ombrac-macros
        run: cargo publish

      - name: Publish ombrac-transport
        working-directory: crates/ombrac-transport
        run: cargo publish

      - name: Publish ombrac-server
        working-directory: crates/ombrac-server
        run: cargo publish

      - name: Publish ombrac-client
        working-directory: crates/ombrac-client
        run: cargo publish
