/* Generated by cbindgen */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

/**
 * A type alias for the C-style callback function pointer.
 *
 * The `level` parameter is an integer representation of the log level:
 * - `0`: TRACE
 * - `1`: DEBUG
 * - `2`: INFO
 * - `3`: WARN
 * - `4`: ERROR
 */
typedef void (*LogCallback)(int32_t level, const char *message, const char *target);

/**
 * Initializes and starts the service with a given JSON configuration.
 *
 * This function sets up the asynchronous runtime, parses the configuration,
 * and launches the main service. It must be called before any other service
 * operations. The service must be shut down via `ombrac_server_service_shutdown` to ensure
 * a clean exit.
 *
 * # Arguments
 *
 * * `config_json` - A pointer to a null-terminated UTF-8 string containing the
 *   service configuration in JSON format.
 *
 * # Returns
 *
 * * `0` on success.
 * * `-1` on failure (e.g., invalid configuration, service already running, or
 *   runtime initialization failed).
 *
 * # Safety
 *
 * The caller must ensure that `config_json` is a valid pointer to a
 * null-terminated C string. This function is not thread-safe and should not be
 * called concurrently with `ombrac_server_service_shutdown`.
 */
void ombrac_server_logging_init(LogCallback callback);

int32_t ombrac_server_service_startup(const char *config_json);

/**
 * Shuts down the running service and releases all associated resources.
 *
 * This function will gracefully stop the service and terminate the asynchronous
 * runtime. It is safe to call even if the service was not started or has
 * already been stopped.
 *
 * # Returns
 *
 * * `0` on completion.
 *
 * # Safety
 *
 * This function is not thread-safe and should not be called concurrently with
 * `ombrac_server_service_startup`.
 */
int32_t ombrac_server_service_shutdown(void);
